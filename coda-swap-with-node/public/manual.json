{
    "title": "Creating Ethereum Dapp with UI",
    "steps": [
      {
        "step": "1",
        "task": "In this exercise, we will create an Ethereum Dapp, Coda Swap (Solidity Smart Contract + Node Js backend + HTML & CSS) that exchanges ETH for a our custom token (CODA). We will be using hardhat to deploy the smart contract on a local Ganache blockchain. We will then use Node + HTML + CSS + JS , to build a web app that can interact with the deployed smart contract."
      },
      {
        "step": "2",
        "task": "First step is to create a hardhat project. Normally, we can use 'npx hardhat' command to create a hardhat project with new hardhat.config.js file. But in this case, we will be using a pre-created hardhat project."
      },
      {
        "content": "git clone https://github.com/Sampad-Adhikary/CodaSwap/tree/main/coda-swap-with-node.git",
        "step": "3",
        "task": "Clone already created hardhat project from github repo."
      },
      {
        "step": "4",
        "task": "Switch to 'VS Code' and check the cloned 'coda-swap-with-node' directory. You will be able to see  'coda-swap-smart-contact' and 'public' directories. In this the first directory is related to the smart contract and hardhat and last one is related to our app's UI."
      },
      {
        "step": "5",
        "task": "Open the 'coda-swap-with-node' directory and then open the smart-contract  written in solidity language in 'contracts' folder. The smart contract has 4 methods 1.sendETHForTokens() to exchange tokens for ethereum. 2. checkTokenBalance which returns the balance in terms of CODA tokens. 3. transferTokens to transfer tokens from one ethereum address to another. and 4. getEthBack to exchange tokens for Ether nad receive and receive a percentage of Ether back."
      },
      {
        "content": "npm install --save-dev '@nomiclabs/hardhat-waffle' '@openzeppelin/contracts' 'dotenv' 'ethers' 'hardhat'",
        "step": "6",
        "task": "Before running hardhat, we will have to install all the dependencies. This can be done using 'npm install' command. In terminal, from the 'coda-swap-smart-contract' directory, run the command."
      },
      {
        "content": "npx hardhat compile",
        "step": "7",
        "task": "Compile the hardhat source code to generate byte code. This can be done using 'npx hardhat compile' command. Run the compilation command."
      },
      {
        "content": "ganache -h 0.0.0.0 -m testseed",
        "step": "8",
        "task": "open a new terminal and run Ganache to start a local blockchain. Ganache is a personal blockchain for Ethereum development that can be used to deploy contracts, develop applications, and run tests."
      },
      {
        "step": "9",
        "task": "Let Ganache run in the current tab and Open a new terminal tab to proceed with the next steps."
      },
      {
        "step": "10",
        "task": "In this case, we have already added private keys of first account (accounts[0]) provided by Ganache to 'hardhat.config.js' file. This will be used to deploy the Smart contract to Ganache blockchain. We will have to change this with appropriate private keys if we want to deploy it on public Testnets or Mainnet."
      },
      {
        "step": "11",
        "task": "We are now ready to deploy this contract. Switch to 'scripts' folder. deploy.js is the deployment script written in Javascript which will deploy the smart contract using the hardhat configuration."
      },
      {
        "content": "npx hardhat run scripts/deploy.js --network ganache",
        "step": "12",
        "task": "Switch to terminal and run deployment script to deploy the smart contract on 'ganache' network."
      },
      {
        "step": "13",
        "task": "A successful deployment will generate a contract address which will be printed in the terminal, keep it safe because we will need it in future steps. It will also create a new file called 'Token.json' in the 'artifacts/contracts' folder. This file contains the ABI for the deployed smart contract."
      },
      {
        "step": "19",
        "task": "Contract is deployed and we can interact with it. Now, let's proceed to create a Node + HTML project to build a web app that can interact with the deployed smart contract."
      },
      {
        "step": "20",
        "task": "At this point, the next step is to create a node project using 'npm init' command. But, we already have the project files in the cloned repo. So, we will be using that."
      },
      {
        "content": "cd ..",
        "step": "21",
        "task": "Change the project directory to the cloned repo 'coda-swap-with-node'."
      },
      {
        "content": "npm install --save-dev express",
        "step": "22",
        "task": "Let's install express that makes it easy to code a  a new React project. Make sure to run this command in 'webapp' directory."
      },
      {
        "content": "npm start",
        "step": "23",
        "task": "Launch local app server. This will serve the web app over port 3000. Keep this command running in the terminal and use new terminal tab for next steps."
      },
      {
        "step": "24",
        "task": "Switch to 'localhost:3000' tab, press 'Go' button. If you are facing issues and seeing a warning in a browser regarding 'Embedded page not allowed', then please use the provided button to access this link in a new browser tab. Then, you should be able to see the webapp page."
      },
      {
        "step": "25",
        "task": "The react web app contains code to interact with the deployed 'NumberStorage' smart contract. However, we wil have to make some changes for it to work."
      },
      {
        "step": "26",
        "task": "Switch to VS Code and check 'App.js'  in 'webapp/src' directory. This is the main app file. Replace the Contract address 'contractAddress' present in this file with the contract address acquired in the previous steps."
      },
      {
        "step": "27",
        "task": "Similarly, in folder 'webapp/src/components' you wil find two javascript files i.e. 'fetch.js' and 'store.js'. As the name suggests, These are components to be used in the parent component 'App.js' (imported in lines 4-5). As the name suggests, 'fetch.js' displays the value of storedNumber, whereas 'store.js' stores the store value on blockchain."
      },
      {
        "metaMaskTutorial": "https://www.youtube.com/embed/zMIqHD_6g9A",
        "step": "28",
        "blockchain": "add_local",
        "task": "As we will be using Metamask to interact with the smart contract, we will need to add our local Ganache network to Metamask. To do so, click on the provided button. This will take you through the process of adding a custom RPC to Metamask."
    },
    {
        "img": "https://web3toolsimage.s3.eu-north-1.amazonaws.com/vyper-brownie-django-dapp/ss1.png",
        "step": "29",
        "task": "Now, we need to add an address to Metamask which has some test Ether. Click on Account section of Metamask and select 'Import Account'."
    },
    {
        "content": "0xf72ceaaa935cfc259264319c8c1504964caf0789c41c990f0464b2a85d9eb140",
        "img": "https://web3toolsimage.s3.eu-north-1.amazonaws.com/vyper-brownie-django-dapp/ss2.png",
        "step": "30",
        "task": "Enter the private key of the second account (accounts[1]) provided by Ganache. This will import the account to Metamask. This account has 1000 test Ether."
    },
      {
        "step": "31",
        "task": "Reading the value doesn't need write to blockchain, so we will view the saved value without any transaction. However, to save a new value, enter a new number (e.g., 897) in the text field and press the 'Store' button. As this is a write operation, Metamask will initiate a transaction to the smart contract. You'll need to click the 'Confirm' button to authorize the transaction and proceed with the value updation."
      },
      {
        "step": "32",
        "task": "After the transaction is confirmed, refresh the page, and you will observe that the most recent value (897 in this case) will be displayed on the page. in front of storednumber feild."
      },
      {
        "step": "33",
        "task": "We leaned how to interact develop, test, deploy a Solidity Smart Contract on Ganache blockchain and create a UI for it in React." 
      }
    ],
  "time": "60 minutes"
  }